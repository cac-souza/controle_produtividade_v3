# carregar_tarefas.py - 

"""
M√≥dulo para sincronizar as tarefas padr√£o no banco de dados.
Pode ser executado de forma independente ou importado por outros scripts.
"""

from db import SessionLocal
from modelos import Tarefa

def carregar_tarefas_padrao():
    """Sincroniza o banco com as tarefas padr√£o: insere, atualiza, reativa e desativa."""
    session = SessionLocal()

    tarefas_padrao = [
        ("01", "Plant√£o Fiscal ¬Ω Per√≠odo", 15.00),
        ("02", "Dilig√™ncia Externa", 4.00),
        ("02.1", "Dilig√™ncia Externa fora do per√≠metro urbano", 6.00),
        ("03", "Termo de In√≠cio de A√ß√£o Fiscal", 3.00),
        ("04", "An√°lise de Documentos Fiscais (por lote de 50)", 4.00),
        ("05", "Demonstrativo de Apura√ß√£o de D√©bito Fiscal (por folha)", 4.00),
        ("06", "Notifica√ß√£o", 3.00),
        ("07", "Termo de Ocorr√™ncias", 4.00),
        ("08", "Termo de Dilig√™ncias", 2.00),
        ("09", "Lan√ßamento de ISSQN no Movimento Econ√¥mico (por exerc√≠cio)", 2.00),
        ("10", "Informa√ß√£o/Manifesta√ß√£o em Processo", 5.00),
        ("11", "Elabora√ß√£o de Relat√≥rios", 5.00),
        ("12", "Publica√ß√£o de Edital", 4.00),
        ("13", "Outras Atividades n√£o Previstas (por unidade de 1 hora)", 4.00),
        ("14", "Participa√ß√£o em Cursos ou Programas de Treinamento (por ¬Ω per√≠odo)", 15.00),
        ("15", "Apura√ß√£o Fiscal c/ resultado para um exerc√≠cio", 52.00),
        ("15.1", "Apura√ß√£o Fiscal c/ resultado para exerc√≠cios adicionais", 24.00),
        ("16", "Apura√ß√£o Fiscal s/ resultado para um exerc√≠cio", 30.00),
        ("16.1", "Apura√ß√£o Fiscal s/ resultado para exerc√≠cios adicionais", 8.00),
        ("17", "Notifica√ß√£o para constitui√ß√£o de cr√©dito tribut√°rio (sem A.Infra√ß√£o)", 8.00),
        ("18", "Enquadramento do ISSQN", 8.00),
        ("19", "Atividades Internas (por unidade de 1h)", 4.00),
        ("20", "Auto de Infra√ß√£o", 6.00),
        ("21", "Manifesta√ß√£o em processo de impugna√ß√£o de Auto de Infra√ß√£o", 8.00),
        ("21.1", "Quando o manifestante n√£o for o autor do Auto de Infra√ß√£o", 12.00),
        ("22", "Chefia ou dire√ß√£o de √≥rg√£o respons√°vel por atividades previstas nesta tabela (ponto por dia)", 30.00),
        ("98", "Licenciado", 0),
        ("99", "Licenciado", 600)
    ]

    codigos_padrao = {codigo for codigo, _, _ in tarefas_padrao}
    tarefas_existentes = session.query(Tarefa).all()

    inseridas = 0
    reativadas = 0
    atualizadas = 0
    desativadas = 0

    # Atualiza ou insere tarefas padr√£o
    for codigo, descricao, pontos in tarefas_padrao:
        tarefa = session.query(Tarefa).filter_by(codigo=codigo).first()
        if tarefa:
            if not tarefa.ativa:
                tarefa.ativa = True
                reativadas += 1
            if tarefa.descricao != descricao or tarefa.pontos != pontos:
                tarefa.descricao = descricao
                tarefa.pontos = pontos
                atualizadas += 1
        else:
            nova_tarefa = Tarefa(
                codigo=codigo,
                descricao=descricao,
                pontos=pontos,
                ativa=True
            )
            session.add(nova_tarefa)
            inseridas += 1

    # Desativa tarefas que n√£o est√£o mais na lista padr√£o
    for tarefa in tarefas_existentes:
        if tarefa.codigo not in codigos_padrao and tarefa.ativa:
            tarefa.ativa = False
            desativadas += 1

    session.commit()
    session.close()

    print(f"‚úÖ {inseridas} tarefas inseridas.")
    print(f"üîÑ {reativadas} tarefas reativadas.")
    print(f"‚úèÔ∏è {atualizadas} tarefas atualizadas.")
    print(f"üßπ {desativadas} tarefas desativadas.")

if __name__ == "__main__":
    carregar_tarefas_padrao()


